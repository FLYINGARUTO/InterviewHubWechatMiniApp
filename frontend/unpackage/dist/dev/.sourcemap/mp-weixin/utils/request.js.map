{"version":3,"file":"request.js","sources":["utils/request.js"],"sourcesContent":["import config from \"../config/config\"\r\n\r\n// Wrapper function for uni.request\nconst request = (option) => {\n    return new Promise((resolve, reject) => {\n        // Make an HTTP request using uni.request\n        uni.request({\n            url: config.apiBaseUrl + option.url, // Combine base URL with endpoint\n            data: option.data || {}, // Use provided data or an empty object\n            header: option.header || {}, // Use provided headers or an empty object\n            method: option.method || \"GET\", // Default HTTP method is GET\n\n            // Callback for successful request\n            success: (res) => {\n                // Check if the response code indicates success\n                if (res.data.code == 20000) {\n                    resolve(res); // Resolve the promise with the response\n                } else {\n                    // Handle business logic errors\n                    let errInfo = res.data?.message || \"unknown error\"; // Default to 'unknown error' if no message is provided\n                    uni.showToast({\n                        icon: \"error\", // Display an error icon\n                        duration: 3000, // Show the toast for 3 seconds\n                        title: errInfo // Show the error message\n                    });\n                    setTimeout(() => {\n                        reject(new Error(res.statusCode)); // Reject the promise after a delay\n                    }, 3000);\n                }\n            },\n\n            // Callback for failed request\n            fail: (err) => {\n                let errInfo = '';\n                // Handle specific error scenarios\n                if (err.errMsg.includes('timeout')) {\n                    errInfo = 'request timeout, please try again';\n                } else if (err.errMsg.includes('abort')) {\n                    errInfo = 'request data wrong, please try again';\n                } else {\n                    errInfo = 'Internet request wrong';\n                }\n                \n                // Show a toast notification with the error\n                uni.showToast({\n                    icon: \"none\", // Display a neutral icon\n                    title: errInfo, // Show the error message\n                    duration: 3000 // Show the toast for 3 seconds\n                });\n                reject(new Error(errInfo)); // Reject the promise with the error message\n            }\n        });\n    });\n};\n\n// Export the request function as the default export\nexport default request;\n"],"names":["uni","config"],"mappings":";;;AAGK,MAAC,UAAU,CAAC,WAAW;AACxB,SAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AAEpCA,kBAAAA,MAAI,QAAQ;AAAA,MACR,KAAKC,cAAM,OAAC,aAAa,OAAO;AAAA;AAAA,MAChC,MAAM,OAAO,QAAQ,CAAE;AAAA;AAAA,MACvB,QAAQ,OAAO,UAAU,CAAE;AAAA;AAAA,MAC3B,QAAQ,OAAO,UAAU;AAAA;AAAA;AAAA,MAGzB,SAAS,CAAC,QAAQ;;AAEd,YAAI,IAAI,KAAK,QAAQ,KAAO;AACxB,kBAAQ,GAAG;AAAA,QAC/B,OAAuB;AAEH,cAAI,YAAU,SAAI,SAAJ,mBAAU,YAAW;AACnCD,wBAAAA,MAAI,UAAU;AAAA,YACV,MAAM;AAAA;AAAA,YACN,UAAU;AAAA;AAAA,YACV,OAAO;AAAA;AAAA,UAC/B,CAAqB;AACD,qBAAW,MAAM;AACb,mBAAO,IAAI,MAAM,IAAI,UAAU,CAAC;AAAA,UACnC,GAAE,GAAI;AAAA,QACV;AAAA,MACJ;AAAA;AAAA,MAGD,MAAM,CAAC,QAAQ;AACX,YAAI,UAAU;AAEd,YAAI,IAAI,OAAO,SAAS,SAAS,GAAG;AAChC,oBAAU;AAAA,QACb,WAAU,IAAI,OAAO,SAAS,OAAO,GAAG;AACrC,oBAAU;AAAA,QAC9B,OAAuB;AACH,oBAAU;AAAA,QACb;AAGDA,sBAAAA,MAAI,UAAU;AAAA,UACV,MAAM;AAAA;AAAA,UACN,OAAO;AAAA;AAAA,UACP,UAAU;AAAA;AAAA,QAC9B,CAAiB;AACD,eAAO,IAAI,MAAM,OAAO,CAAC;AAAA,MAC5B;AAAA,IACb,CAAS;AAAA,EACT,CAAK;AACL;;"}